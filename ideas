tmux pipe debuger
=================

REPL
	dynamically add filters/commands to current pipeline

	prompt
		color
		less
		tab completion
		caching data

	use the shell as REPL!

use files to serialize data
	files take space
	pipes are dynamic, files means that the whole data has to be 
		generated

	pipes are run in parallel
		tee let's use copy the data but the data isn't complete
		until sink has read everything

	this is why up demands an input, the input is serialized (in memeory)
	and only the new filters are applied, without caching

run pipe in application in tmux session/window
	all data in/out can be displayed in tabs

pause/stop/remove/ignore filter
	can be part of the command line to start paused
	filter which also listen to events

dynamic reuse of serialized data based on command
	a | b
		a -> as,  as->abs

	a | c
		as is still valid, as->acs

	a | b | c
		as and abs are still valid, abs->abcs

	caches are valid if there is no side effect

	caches are kept even if a command is not use

save data by default
	remind the user that the data is saved
		in case it contains sensitive information

	save data for all part of pipeline
		tpd a | b | c will save the data generated by a, filtered by b, filtered by c
			tpd_full_command_time_part_of_filter.tpd

		use tee, saving is just a something added in the pipeline

	serialized data removal
		manual with gc command
		at end of session
		display stats about the data

replay saved_data
	tpd name_part.tpd | rest_of_pipeline

	can as well use cat

what file is that saved in?
	named_part must contain the command that generated it
	named part should contain a digest in case the same command
		has different output

run filter in debugger
	debugger for the filter, ie perl debugger for a perl script
	pipe debugger, an interactive program to control data flow
	
	or run debugger in a terminal with input from serialized data

run filters to the cursor only
	lets one check the output without running the rest of the pipeline

nop filters
	can display debug data in other pane letting the pipeline run
	without interference

	color stdin and out, or have separate panes with synch tags

	display amount of data send through a pipe

open data at the cursor position in new pane/replace main pane

remote filter via nc

control program
	present all the filter windows in one terminal
	shortcut to burst data in one of the filters, use extra filter command instead for baking it in control program
	control which data is send through pipe, given an input, select what's send

	adding data in the pipeline
		{ cat ; cat file ; }
		edit the file

control program shortcut

pipeline commands are in consecutive windows , use tmux navigation keys  
	example with docker container as a filter
	color state, when data is not available, process stopped
	stats after filter is run, exit status, time, cpu usage, ..., closes after timeout
	take already written pipeline and run through tpipe, quote the line and pass to tpipe, tpipe option to start all filters paused

